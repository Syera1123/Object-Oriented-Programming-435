Index: src/Zoo/ReceiveData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Zoo;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\npublic class ReceiveData extends JFrame {\r\n    private JPanel mainReceive;\r\n    private JLabel lblTicketType;\r\n    private JLabel lblKid;\r\n    private JLabel lblAdult;\r\n    private JLabel lblOKU;\r\n    private JLabel lblSafari;\r\n    private JLabel lblPhotobooth;\r\n    private JLabel lblAnimalFood;\r\n    private JLabel lblBirdShow;\r\n    private JLabel lblTotal;\r\n    private JButton btnPay;\r\n    private JButton btnEdit;  // Make sure this matches the one in .form\r\n\r\n    // Declare variables to pass back\r\n    private String ticketType;\r\n    private int kid, kidPrice, adult, adultPrice, oku, okuPrice;\r\n    private boolean safari, photobooth;\r\n    private int animalFood, animalFoodPrice, birdShow, birdShowPrice, total;\r\n\r\n    public ReceiveData(String ticketType, int kid, int kidPrice, int adult, int adultPrice, int oku, int okuPrice,\r\n                       boolean safari, boolean photobooth, int animalFood, int animalFoodPrice,\r\n                       int birdShow, int birdShowPrice, int total) {\r\n\r\n        this.ticketType = ticketType;\r\n        this.kid = kid;\r\n        this.kidPrice = kidPrice;\r\n        this.adult = adult;\r\n        this.adultPrice = adultPrice;\r\n        this.oku = oku;\r\n        this.okuPrice = okuPrice;\r\n        this.safari = safari;\r\n        this.photobooth = photobooth;\r\n        this.animalFood = animalFood;\r\n        this.animalFoodPrice = animalFoodPrice;\r\n        this.birdShow = birdShow;\r\n        this.birdShowPrice = birdShowPrice;\r\n        this.total = total;\r\n\r\n        setTitle(\"Zoo Ticket Summary\");\r\n        setSize(700, 500);\r\n        setDefaultCloseOperation(DISPOSE_ON_CLOSE);\r\n        setLocationRelativeTo(null);\r\n\r\n        // === Background ===\r\n        JLabel backgroundLabel = new JLabel();\r\n        ImageIcon bgIcon = new ImageIcon(getClass().getResource(\"/Untitled design.png\"));\r\n        backgroundLabel.setIcon(new ImageIcon(bgIcon.getImage().getScaledInstance(700, 500, Image.SCALE_SMOOTH)));\r\n        backgroundLabel.setBounds(0, 0, 700, 500);\r\n\r\n        mainReceive.setOpaque(false);\r\n\r\n        // === Buttons Styling ===\r\n        btnPay.setBackground(new Color(156, 102, 61));\r\n        btnPay.setForeground(Color.WHITE);\r\n        btnPay.setFont(new Font(\"Arial\", Font.BOLD, 16));\r\n        btnPay.setFocusPainted(false);\r\n        btnPay.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));\r\n\r\n        btnEdit.setBackground(new Color(126, 170, 255)); // Cornflower Blue\r\n        btnEdit.setForeground(Color.WHITE);\r\n        btnEdit.setFont(new Font(\"Arial\", Font.BOLD, 16));\r\n        btnEdit.setFocusPainted(false);\r\n        btnEdit.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));\r\n\r\n        // === Set Labels ===\r\n        lblTicketType.setText(\"Ticket Type: \" + ticketType);\r\n        lblKid.setText(\"   - Kid     x \" + kid + \" = RM \" + (kid * kidPrice));\r\n        lblAdult.setText(\"   - Adult x \" + adult + \" = RM \" + (adult * adultPrice));\r\n        lblOKU.setText(\"   - OKU  x \" + oku + \" = RM \" + (oku * okuPrice));\r\n        lblSafari.setText(\"   - Safari Ride: \" + (safari ? \"Yes (RM30)\" : \"No\"));\r\n        lblPhotobooth.setText(\"   - Photobooth: \" + (photobooth ? \"Yes (RM30)\" : \"No\"));\r\n        lblAnimalFood.setText(\"   - Animal Food x \" + animalFood + \" = RM \" + (animalFood * animalFoodPrice));\r\n        lblBirdShow.setText(\"   - Bird Show     x \" + birdShow + \" = RM \" + (birdShow * birdShowPrice));\r\n        lblTotal.setText(\"      Total:RM \" + total);\r\n\r\n        // === Pay Button Action ===\r\n        btnPay.addActionListener(e -> {\r\n            int confirm = JOptionPane.showConfirmDialog(this, \"Confirm payment?\", \"Confirm\", JOptionPane.YES_NO_OPTION);\r\n            if (confirm == JOptionPane.YES_OPTION) {\r\n                Object[] options = {\"Cash\", \"Card\", \"Online Transfer\"};\r\n                int method = JOptionPane.showOptionDialog(this, \"Select payment method:\", \"Payment\",\r\n                        JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);\r\n\r\n                if (method != JOptionPane.CLOSED_OPTION) {\r\n                    saveReceiptToFile(ticketType, kid, kidPrice, adult, adultPrice, oku, okuPrice,\r\n                            safari, photobooth, animalFood, animalFoodPrice, birdShow, birdShowPrice, total,\r\n                            options[method].toString());\r\n\r\n                    JOptionPane.showMessageDialog(this, \"Payment successful via \" + options[method] + \"!\");\r\n                }\r\n            }\r\n            else{\r\n                new Price();\r\n                dispose();\r\n            }\r\n        });\r\n\r\n        // === Edit Button Action ===\r\n        btnEdit.addActionListener(e -> {\r\n            this.dispose();  // Close current window\r\n\r\n            // Open Checkout screen again â€” Update with your actual Checkout class name\r\n            new Checkout(ticketType, kid, kidPrice, adult, adultPrice, oku, okuPrice,\r\n                    safari, photobooth, animalFood, animalFoodPrice, birdShow, birdShowPrice, total);\r\n        });\r\n\r\n        // === Layering ===\r\n        JLayeredPane layeredPane = new JLayeredPane();\r\n        layeredPane.setPreferredSize(new Dimension(700, 500));\r\n\r\n        backgroundLabel.setBounds(0, 0, 700, 500);\r\n        mainReceive.setBounds(0, 0, 700, 500);\r\n\r\n        layeredPane.add(backgroundLabel, Integer.valueOf(0));\r\n        layeredPane.add(mainReceive, Integer.valueOf(1));\r\n\r\n        setContentPane(layeredPane);\r\n        pack();\r\n        setVisible(true);\r\n    }\r\n\r\n    private void saveReceiptToFile(String ticketType, int kid, int kidPrice, int adult, int adultPrice, int oku, int okuPrice,\r\n                                   boolean safari, boolean photobooth, int animalFood, int animalFoodPrice,\r\n                                   int birdShow, int birdShowPrice, int total, String method) {\r\n        try (FileWriter writer = new FileWriter(\"receipt.txt\")) {\r\n            LocalDateTime now = LocalDateTime.now();\r\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\");\r\n            String formattedDateTime = now.format(formatter);\r\n\r\n            writer.write(\"\\n\");\r\n            writer.write(\"======================================\\n\");\r\n            writer.write(\"           FINAL RECEIPT              \\n\");\r\n            writer.write(\"======================================\\n\");\r\n            writer.write(\"Date & Time     : \" + formattedDateTime + \"\\n\");\r\n            writer.write(\"Ticket Type     : \" + ticketType + \"\\n\");\r\n            writer.write(\"--------------------------------------\\n\");\r\n            writer.write(\"Kid             x \" + kid + \" = RM \" + (kid * kidPrice) + \"\\n\");\r\n            writer.write(\"Adult           x \" + adult + \" = RM \" + (adult * adultPrice) + \"\\n\");\r\n            writer.write(\"OKU             x \" + oku + \" = RM \" + (oku * okuPrice) + \"\\n\");\r\n            writer.write(\"--------------------------------------\\n\");\r\n            writer.write(\"Safari Ride     : \" + (safari ? \"Yes (RM30)\" : \"No\") + \"\\n\");\r\n            writer.write(\"Photobooth      : \" + (photobooth ? \"Yes (RM30)\" : \"No\") + \"\\n\");\r\n            writer.write(\"--------------------------------------\\n\");\r\n            writer.write(\"Animal Food     x \" + animalFood + \" = RM \" + (animalFood * animalFoodPrice) + \"\\n\");\r\n            writer.write(\"Bird Show       x \" + birdShow + \" = RM \" + (birdShow * birdShowPrice) + \"\\n\");\r\n            writer.write(\"======================================\\n\");\r\n            writer.write(\"Payment Method  : \" + method + \"\\n\");\r\n            writer.write(\"TOTAL           : RM \" + total + \"\\n\");\r\n            writer.write(\"======================================\\n\");\r\n\r\n            File file = new File(\"receipt.txt\");\r\n            if (file.exists()) {\r\n                Desktop.getDesktop().open(file);\r\n            }\r\n\r\n        } catch (IOException ex) {\r\n            JOptionPane.showMessageDialog(this, \"Failed to save or open receipt.\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Zoo/ReceiveData.java b/src/Zoo/ReceiveData.java
--- a/src/Zoo/ReceiveData.java	(revision 7b35a443bf526ade7e177bf954b4a3536e0d9b1a)
+++ b/src/Zoo/ReceiveData.java	(date 1751795508678)
@@ -2,12 +2,73 @@
 
 import javax.swing.*;
 import java.awt.*;
+import java.awt.event.*;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 
+abstract class ExtraActivity {
+    protected String name;
+    protected int price;
+
+    public ExtraActivity(String name, int price) {
+        this.name = name;
+        this.price = price;
+    }
+
+    public abstract String getDescription();
+
+    public int getPrice() {
+        return price;
+    }
+
+    public String getName() {
+        return name;
+    }
+}
+
+class SafariRide extends ExtraActivity {
+    public SafariRide(boolean selected) {
+        super(" Safari Ride", selected ? 30 : 0);
+    }
+
+    @Override
+    public String getDescription() {
+        return price > 0 ? "Yes (RM30)" : "No";
+    }
+}
+
+class Photobooth extends ExtraActivity {
+    public Photobooth(boolean selected) {
+        super("Photobooth", selected ? 30 : 0);
+    }
+
+    @Override
+    public String getDescription() {
+        return price > 0 ? "Yes (RM30)" : "No";
+    }
+}
+
+class BirdShow extends ExtraActivity {
+    private int quantity;
+
+    public BirdShow(int quantity, int unitPrice) {
+        super("Bird Show", quantity * unitPrice);
+        this.quantity = quantity;
+    }
+
+    public int getQuantity() {
+        return quantity;
+    }
+
+    @Override
+    public String getDescription() {
+        return "x " + quantity + " = RM " + price;
+    }
+}
+
 public class ReceiveData extends JFrame {
     private JPanel mainReceive;
     private JLabel lblTicketType;
@@ -20,13 +81,11 @@
     private JLabel lblBirdShow;
     private JLabel lblTotal;
     private JButton btnPay;
-    private JButton btnEdit;  // Make sure this matches the one in .form
+    private JButton btnEdit;
 
-    // Declare variables to pass back
     private String ticketType;
-    private int kid, kidPrice, adult, adultPrice, oku, okuPrice;
-    private boolean safari, photobooth;
-    private int animalFood, animalFoodPrice, birdShow, birdShowPrice, total;
+    private int kid, kidPrice, adult, adultPrice, oku, okuPrice, animalFood, animalFoodPrice, total;
+    private ExtraActivity[] activities;
 
     public ReceiveData(String ticketType, int kid, int kidPrice, int adult, int adultPrice, int oku, int okuPrice,
                        boolean safari, boolean photobooth, int animalFood, int animalFoodPrice,
@@ -39,20 +98,21 @@
         this.adultPrice = adultPrice;
         this.oku = oku;
         this.okuPrice = okuPrice;
-        this.safari = safari;
-        this.photobooth = photobooth;
         this.animalFood = animalFood;
         this.animalFoodPrice = animalFoodPrice;
-        this.birdShow = birdShow;
-        this.birdShowPrice = birdShowPrice;
         this.total = total;
 
+        this.activities = new ExtraActivity[]{
+                new SafariRide(safari),
+                new Photobooth(photobooth),
+                new BirdShow(birdShow, birdShowPrice)
+        };
+
         setTitle("Zoo Ticket Summary");
         setSize(700, 500);
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
         setLocationRelativeTo(null);
 
-        // === Background ===
         JLabel backgroundLabel = new JLabel();
         ImageIcon bgIcon = new ImageIcon(getClass().getResource("/Untitled design.png"));
         backgroundLabel.setIcon(new ImageIcon(bgIcon.getImage().getScaledInstance(700, 500, Image.SCALE_SMOOTH)));
@@ -60,62 +120,35 @@
 
         mainReceive.setOpaque(false);
 
-        // === Buttons Styling ===
         btnPay.setBackground(new Color(156, 102, 61));
         btnPay.setForeground(Color.WHITE);
         btnPay.setFont(new Font("Arial", Font.BOLD, 16));
-        btnPay.setFocusPainted(false);
-        btnPay.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
 
-        btnEdit.setBackground(new Color(126, 170, 255)); // Cornflower Blue
+        btnEdit.setBackground(new Color(126, 170, 255));
         btnEdit.setForeground(Color.WHITE);
         btnEdit.setFont(new Font("Arial", Font.BOLD, 16));
-        btnEdit.setFocusPainted(false);
-        btnEdit.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
 
-        // === Set Labels ===
         lblTicketType.setText("Ticket Type: " + ticketType);
         lblKid.setText("   - Kid     x " + kid + " = RM " + (kid * kidPrice));
         lblAdult.setText("   - Adult x " + adult + " = RM " + (adult * adultPrice));
         lblOKU.setText("   - OKU  x " + oku + " = RM " + (oku * okuPrice));
-        lblSafari.setText("   - Safari Ride: " + (safari ? "Yes (RM30)" : "No"));
-        lblPhotobooth.setText("   - Photobooth: " + (photobooth ? "Yes (RM30)" : "No"));
+
+        lblSafari.setText("   - " + activities[0].getName() + ": " + activities[0].getDescription());
+        lblPhotobooth.setText("   - " + activities[1].getName() + ": " + activities[1].getDescription());
+        lblBirdShow.setText("   - " + activities[2].getName() + ": " + activities[2].getDescription());
+
         lblAnimalFood.setText("   - Animal Food x " + animalFood + " = RM " + (animalFood * animalFoodPrice));
-        lblBirdShow.setText("   - Bird Show     x " + birdShow + " = RM " + (birdShow * birdShowPrice));
-        lblTotal.setText("      Total:RM " + total);
+        lblTotal.setText("      Total: RM " + total);
 
-        // === Pay Button Action ===
-        btnPay.addActionListener(e -> {
-            int confirm = JOptionPane.showConfirmDialog(this, "Confirm payment?", "Confirm", JOptionPane.YES_NO_OPTION);
-            if (confirm == JOptionPane.YES_OPTION) {
-                Object[] options = {"Cash", "Card", "Online Transfer"};
-                int method = JOptionPane.showOptionDialog(this, "Select payment method:", "Payment",
-                        JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
-
-                if (method != JOptionPane.CLOSED_OPTION) {
-                    saveReceiptToFile(ticketType, kid, kidPrice, adult, adultPrice, oku, okuPrice,
-                            safari, photobooth, animalFood, animalFoodPrice, birdShow, birdShowPrice, total,
-                            options[method].toString());
+        btnPay.addActionListener(e -> handlePayment());
 
-                    JOptionPane.showMessageDialog(this, "Payment successful via " + options[method] + "!");
-                }
-            }
-            else{
-                new Price();
-                dispose();
-            }
-        });
-
-        // === Edit Button Action ===
         btnEdit.addActionListener(e -> {
-            this.dispose();  // Close current window
-
-            // Open Checkout screen again â€” Update with your actual Checkout class name
+            this.dispose();
             new Checkout(ticketType, kid, kidPrice, adult, adultPrice, oku, okuPrice,
-                    safari, photobooth, animalFood, animalFoodPrice, birdShow, birdShowPrice, total);
+                    activities[0].getPrice() > 0, activities[1].getPrice() > 0, animalFood, animalFoodPrice,
+                    ((BirdShow) activities[2]).getQuantity(), birdShowPrice, total);
         });
 
-        // === Layering ===
         JLayeredPane layeredPane = new JLayeredPane();
         layeredPane.setPreferredSize(new Dimension(700, 500));
 
@@ -130,42 +163,49 @@
         setVisible(true);
     }
 
-    private void saveReceiptToFile(String ticketType, int kid, int kidPrice, int adult, int adultPrice, int oku, int okuPrice,
-                                   boolean safari, boolean photobooth, int animalFood, int animalFoodPrice,
-                                   int birdShow, int birdShowPrice, int total, String method) {
+    private void handlePayment() {
+        int confirm = JOptionPane.showConfirmDialog(this, "Confirm payment?", "Confirm", JOptionPane.YES_NO_OPTION);
+        if (confirm == JOptionPane.YES_OPTION) {
+            Object[] options = {"Cash", "Card", "Online Transfer"};
+            int method = JOptionPane.showOptionDialog(this, "Select payment method:", "Payment",
+                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
+
+            if (method != JOptionPane.CLOSED_OPTION) {
+                saveReceiptToFile(options[method].toString());
+                JOptionPane.showMessageDialog(this, "Payment successful via " + options[method] + "!");
+            }
+        }
+    }
+
+    private void saveReceiptToFile(String method) {
         try (FileWriter writer = new FileWriter("receipt.txt")) {
             LocalDateTime now = LocalDateTime.now();
             DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
-            String formattedDateTime = now.format(formatter);
 
-            writer.write("\n");
-            writer.write("======================================\n");
+            writer.write("\n======================================\n");
             writer.write("           FINAL RECEIPT              \n");
             writer.write("======================================\n");
-            writer.write("Date & Time     : " + formattedDateTime + "\n");
+            writer.write("Date & Time     : " + now.format(formatter) + "\n");
             writer.write("Ticket Type     : " + ticketType + "\n");
             writer.write("--------------------------------------\n");
             writer.write("Kid             x " + kid + " = RM " + (kid * kidPrice) + "\n");
             writer.write("Adult           x " + adult + " = RM " + (adult * adultPrice) + "\n");
             writer.write("OKU             x " + oku + " = RM " + (oku * okuPrice) + "\n");
             writer.write("--------------------------------------\n");
-            writer.write("Safari Ride     : " + (safari ? "Yes (RM30)" : "No") + "\n");
-            writer.write("Photobooth      : " + (photobooth ? "Yes (RM30)" : "No") + "\n");
-            writer.write("--------------------------------------\n");
+            for (ExtraActivity activity : activities) {
+                writer.write(activity.getName() + "     : " + activity.getDescription() + "\n");
+            }
             writer.write("Animal Food     x " + animalFood + " = RM " + (animalFood * animalFoodPrice) + "\n");
-            writer.write("Bird Show       x " + birdShow + " = RM " + (birdShow * birdShowPrice) + "\n");
             writer.write("======================================\n");
             writer.write("Payment Method  : " + method + "\n");
             writer.write("TOTAL           : RM " + total + "\n");
             writer.write("======================================\n");
 
             File file = new File("receipt.txt");
-            if (file.exists()) {
-                Desktop.getDesktop().open(file);
-            }
+            if (file.exists()) Desktop.getDesktop().open(file);
 
         } catch (IOException ex) {
             JOptionPane.showMessageDialog(this, "Failed to save or open receipt.");
         }
     }
-}
+}
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 7b35a443bf526ade7e177bf954b4a3536e0d9b1a)
+++ b/.idea/misc.xml	(date 1751795449711)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_24" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
